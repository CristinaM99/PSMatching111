/* In the following code:
(i) the macro function 'simulation' allows to simulate 'n_simul' datasets of 'n_pz' patients 
following a chosen disease prevalence pattern in the three centers ('prev_A','prev_B','prev_C'), 
and calculates the measures of performance in the unmatched cohort and in the pairwise matched cohorts;
(ii) the macro function 'import_match111' imports the datasets containing the triplets of patients 
(one case and two controls, one per control group) matched (in R), and calculates the measures of performance 
in the three-way matched cohort;
(iii) four macro functions allow to calculate the overall standardized distance (OSD) between the two gorups of controls 
in the unmatched, pairwise matched, and three-way matched cohorts. */

*define the library in which to store the simulated datasets;
libname simul "<enter your path here>";

%macro simulation(n_simul,n_pz,prev_A,prev_B,prev_C);

	%do i=1 %to &n_simul; 
	%put iteration &i;

		*data generating process;
		data simul.simul&i;
			*outcome probability in center A (cases);
			rand_pA = rand("Bernoulli",0.5); 
			if rand_pA = 0 then pA = 0.1;
			else if rand_pA = 1 then pA = 0.25;
			*risk ratio of cases (RRcases);
			alpha = pA/(1-pA); 
			*risk difference (RD) of controls;
			rand_RD = rand("Bernoulli",0.5); 
			if rand_RD = 0 then RD = 0.05;
			else if rand_RD = 1 then RD = 0.1;
			*outcome probability in center B and C (controls);
			pBC = pA + RD; 
			*standard deviation of continuous confounders;
			rand_sd = rand("Bernoulli",0.5); 
			if rand_sd = 0 then sd = 0.75;
			else if rand_sd = 1 then sd = 1.5;
			*continuous interaction term coefficient;
			rand_beta_IC = rand("Table",1/3,1/3,1/3); 
			if rand_beta_IC = 1 then beta_IC = 1;
			else if rand_beta_IC = 2 then beta_IC = 1.5;
			else if rand_beta_IC = 3 then beta_IC = 2;
			*dichotomous interaction term coefficient;
			rand_beta_ID = rand("Table",1/3,1/3,1/3); 
			if rand_beta_ID = 1 then beta_ID = 1;
			else if rand_beta_ID = 2 then beta_ID = 1.5;
			else if rand_beta_ID = 3 then beta_ID = 2;
			*unmeasured continuous confounder coefficient;
			rand_beta_U = rand("Table",1/3,1/3,1/3); 
			if rand_beta_U = 1 then beta_U = 1;
			else if rand_beta_U = 2 then beta_U = 1.5;
			else if rand_beta_U = 3 then beta_U = 2;
			do ID_pz=1 to &n_pz; 
				*treatment center;
				center = rand("Table",&prev_A,&prev_B,&prev_C)-1;
				if center = 0 then do;
					beta_X = 1; *RRcases/RRcases;
								   end;
				else if center = 1 or center = 2 then do;
					beta_X = (pBC/(1-pBC))/(pA/(1-pA)); *RRcontrols/RRcases = ORcontrolsVScases; 
								   					  end;
				*5 continuous measured confounders;
				C1 = rand("Normal",0.2*center,sd);
				C2 = rand("Normal",0.3*center,sd);
				C3 = rand("Normal",0.4*center,sd);
				C4 = rand("Normal",0.5*center,sd);
				C5 = rand("Normal",0.6*center,sd);
				*5  dichotomous measured confounders;
				if center = 0 then do;
					D1 = rand("Bernoulli",0.168);
					D2 = rand("Bernoulli",0.331);
					D3 = rand("Bernoulli",0.492);
					D4 = rand("Bernoulli",0.642);
					D5 = rand("Bernoulli",0.776);
								  end;
				else if center = 1 then do;
					D1 = rand("Bernoulli",0.1);
					D2 = rand("Bernoulli",0.2);
					D3 = rand("Bernoulli",0.3);
					D4 = rand("Bernoulli",0.4);
					D5 = rand("Bernoulli",0.5);
								   end;
				else if center = 2 then do;
					D1 = rand("Bernoulli",0.05);
					D2 = rand("Bernoulli",0.15);
					D3 = rand("Bernoulli",0.25);
					D4 = rand("Bernoulli",0.35);
					D5 = rand("Bernoulli",0.45);
								   end;
				*2 interaction terms (one continuous, one dichotomous);
				IC = C3*log(beta_X);
				ID = D3*log(beta_X);
				*1 continuous unmeasured confouder;
				U = rand("Normal",0.4*center,1);
				*dichotomous outcome;
				lin_comb = log(alpha) + log(beta_X) + log(1.1)*C1 + log(1.3)*C2 + log(1.5)*C3 + log(1.7)*C4 + log(1.9)*C5 +
					log(1.9)*D1 + log(1.7)*D2 + log(1.5)*D3 + log(1.3)*D4 + log(1.1)*D5 + 
					log(beta_IC)*IC + log(beta_ID)*ID + log(beta_U)*U;
				prob_subj = 1/(1+exp(-lin_comb));
				Y = rand("Bernoulli",prob_subj);
				output;
			end;
			drop rand_sd sd rand_p0 rand_RD p1 alpha rand_beta_IC beta_IC rand_beta_ID beta_ID rand_beta_U beta_U lin_comb prob_subj;
		run;

		*true treatment effect;
		data simul.OR_true_simul&i;
		set simul.simul&i;
		keep beta_X;
		where center ne 0;
		run;
		proc sort data=simul.OR_true_simul&i nodupkey;
		by beta_X;
		run;

		*unmatched cohort;
		**control B vs case contrast;
		DATA tab_unmatchedB;
		simul = &i; 
		RUN;
		***sample size: n = &n_pz;
		DATA tab_unmatchedB1;
		SET tab_unmatchedB;
		n = &n_pz;
		RUN;
		proc delete data=tab_unmatchedB;
		run;
		***covariates standardized differences of meand and proportions (SMDs and SPDs);
		****continuous;
		proc means data=simul.simul&i mean var;
		class center;
		var C1 C2 C3 C4 C5;
		where center ne 2;
		ods output summary=SMD_unmatchedB;
		run;
		proc transpose data=SMD_unmatchedB out=SMD_unmatchedB_long;
		run;
		proc delete data=SMD_unmatchedB;
		run;
		data SMD_unmatchedB_long;
		set SMD_unmatchedB_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_unmatchedB_long;
		set SMD_unmatchedB_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_unmatchedB_final;
		set SMD_unmatchedB_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_unmatchedB_long;
		run;
		****dichotomous;
		proc freq data=simul.simul&i;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		where center ne 2;
		ods output crosstabfreqs=SPD_unmatchedB;
		run;
		data SPD_unmatchedB;
		set SPD_unmatchedB;
		RowPct = Rowpercent/100;
		where (center=0 or center=1) 
		 and (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_unmatchedB out=SPD_unmatchedB_wide;
		run;
		proc delete data=SPD_unmatchedB;
		run;
		data SPD_unmatchedB_wide;
		set SPD_unmatchedB_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_unmatchedB_wide;
		set SPD_unmatchedB_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_unmatchedB_wide out=SPD_unmatchedB_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_unmatchedB_wide;
		run;
		data stdiff_unmatchedB;
		set SMD_unmatchedB_final(rename=(smd=std_diff)) SPD_unmatchedB_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_unmatchedB_final;
		run;
		proc delete data=SPD_unmatchedB_final;
		run;
		proc transpose data=stdiff_unmatchedB out=stdiff_unmatchedB_wide prefix=cov;
		run;
		data stdiff_unmatchedB_wide;
		set stdiff_unmatchedB_wide;
		drop _name_;
		run;
		***overall standardized distance (OSD);
		data abs_stdiff_unmatchedB;
		set stdiff_unmatchedB;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_unmatchedB;
		run;
		proc means data=abs_stdiff_unmatchedB mean;
		var std_diff_abs;
		ods output summary=stdiff_unmatchedB_final;
		run;
		proc delete data=abs_stdiff_unmatchedB;
		run;
		DATA tab_unmatchedB2;
		MERGE tab_unmatchedB1 stdiff_unmatchedB_wide stdiff_unmatchedB_final;
		RUN;
		proc delete data=tab_unmatchedB1;
		run;
		proc delete data=stdiff_unmatchedB_wide;
		run;
		proc delete data=stdiff_unmatchedB_final;
		run;
		***relative bias(%), reduction in bias(%) and mean square error (MSE);
		data sim01;
		set simul.simul&i;
		if center ne 2;
		run;
		proc logistic data=sim01;
		class center(ref='0')/ param=ref;
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_unmatched01;
		run;
		data OR_unmatched01;
		set OR_unmatched01;
		keep oddsratioest;
		rename oddsratioest=OR_unmatched01;
		run;
		data simul.bias_diffsq_unmatched01_s&i;
		merge simul.OR_true_simul&i OR_unmatched01;
		bias_unmatched01 = 100*(OR_unmatched01-beta_X)/beta_X;
		diff_sq_unmatched01 = (OR_unmatched01-beta_X)**2;
		run;
		proc delete data=OR_unmatched01;
		run;
		DATA tab_unmatchedB_final;
		MERGE tab_unmatchedB2 simul.bias_diffsq_unmatched01_s&i;
		RUN;
		proc delete data=tab_unmatchedB2;
		run;
		DATA simul.tab_unmatchedB_final;
		SET simul.tab_unmatchedB_final tab_unmatchedB_final;
		RUN;
		proc delete data=tab_unmatchedB_final;
		run;
		**control C vs case contrast;
		DATA tab_unmatchedC;
		simul = &i; 
		RUN;
		***sample size: n = &n_pz;
		DATA tab_unmatchedC1;
		SET tab_unmatchedC;
		n = &n_pz;
		RUN;
		proc delete data=tab_unmatchedC;
		run;
		***SMDs and SPDs;
		****continuous;
		proc means data=simul.simul&i mean var;
		class center;
		var C1 C2 C3 C4 C5;
		where center ne 1;
		ods output summary=SMD_unmatchedC;
		run;
		proc transpose data=SMD_unmatchedC out=SMD_unmatchedC_long;
		run;
		proc delete data=SMD_unmatchedC;
		run;
		data SMD_unmatchedC_long;
		set SMD_unmatchedC_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_unmatchedC_long;
		set SMD_unmatchedC_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_unmatchedC_final;
		set SMD_unmatchedC_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_unmatchedC_long;
		run;
		****dichotomous;
		proc freq data=simul.simul&i;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		where center ne 1;
		ods output crosstabfreqs=SPD_unmatchedC;
		run;
		data SPD_unmatchedC;
		set SPD_unmatchedC;
		RowPct = Rowpercent/100;
		where (center=0 or center=2) 
		 and (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_unmatchedC out=SPD_unmatchedC_wide;
		run;
		proc delete data=SPD_unmatchedC;
		run;
		data SPD_unmatchedC_wide;
		set SPD_unmatchedC_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_unmatchedC_wide;
		set SPD_unmatchedC_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_unmatchedC_wide out=SPD_unmatchedC_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_unmatchedC_wide;
		run;
		data stdiff_unmatchedC;
		set SMD_unmatchedC_final(rename=(smd=std_diff)) SPD_unmatchedC_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_unmatchedC_final;
		run;
		proc delete data=SPD_unmatchedC_final;
		run;
		proc transpose data=stdiff_unmatchedC out=stdiff_unmatchedC_wide prefix=cov;
		run;
		data stdiff_unmatchedC_wide;
		set stdiff_unmatchedC_wide;
		drop _name_;
		run;
		***OSD;
		data abs_stdiff_unmatchedC;
		set stdiff_unmatchedC;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_unmatchedC;
		run;
		proc means data=abs_stdiff_unmatchedC mean;
		var std_diff_abs;
		ods output summary=stdiff_unmatchedC_final;
		run;
		proc delete data=abs_stdiff_unmatchedC;
		run;
		DATA tab_unmatchedC2;
		MERGE tab_unmatchedC1 stdiff_unmatchedC_wide stdiff_unmatchedC_final;
		RUN;
		proc delete data=tab_unmatchedC1;
		run;
		proc delete data=stdiff_unmatchedC_wide;
		run;
		proc delete data=stdiff_unmatchedC_final;
		run;
		***relative bias(%), reduction in bias(%) and MSE;
		data sim02;
		set simul.simul&i;
		if center ne 1;
		run;
		proc logistic data=sim02;
		class center(ref='0')/ param=ref;
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_unmatched02;
		run;
		data OR_unmatched02;
		set OR_unmatched02;
		keep oddsratioest;
		rename oddsratioest=OR_unmatched02;
		run;
		data simul.bias_diffsq_unmatched02_s&i;
		merge simul.OR_true_simul&i OR_unmatched02;
		bias_unmatched02 = 100*(OR_unmatched02-beta_X)/beta_X;
		diff_sq_unmatched02 = (OR_unmatched02-beta_X)**2;
		run;
		proc delete data=OR_unmatched02;
		run;
		DATA tab_unmatchedC_final;
		MERGE tab_unmatchedC2 simul.bias_diffsq_unmatched02_s&i;
		RUN;
		proc delete data=tab_unmatchedC2;
		run;
		DATA simul.tab_unmatchedC_final;
		SET simul.tab_unmatchedC_final tab_unmatchedC_final;
		RUN;
		proc delete data=tab_unmatchedC_final;
		run;

		*pairwise matched cohort on propensity score (PS);
		**control B vs case contrast;
		proc psmatch data=sim01 region=cs(EXTEND(STAT=PS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=ps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outPS01 ps=_ps matchid=_MatchID;
		ods output StdDiff=SMD01_PS;
		run;
		DATA tab_match11B_PS;
		simul = &i; 
		RUN;
		***sample size;
		proc freq data=outPS01;
		tables center / nocum nopercent;
		ods output OneWayFreqs=numPS01;
		run;
		data numPS01;
		set numPS01;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match11B1_PS;
		MERGE tab_match11B_PS numPS01;
		RUN;
		proc delete data=tab_match11B_PS;
		run;
		proc delete data=numPS01;
		run;
		***SMDs and SPDs;
		data stdiff_match11B_PS;
		set SMD01_PS;
		where obs='Matched';
		keep variable stddiff;
		run;
		proc delete data=SMD01_PS;
		run;
		proc transpose data=stdiff_match11B_PS out=stdiff_match11B_PS_long prefix=cov;
		run;
		data stdiff_match11B_PS_long;
		set stdiff_match11B_PS_long;
		drop _name_ _label_;
		run;
		***OSD;
		data abs_stdiff_match11B_PS;
		set stdiff_match11B_PS;
		abs_stdiff=abs(stddiff);
		run;
		proc delete data=stdiff_match11B_PS;
		run;
		proc means data=abs_stdiff_match11B_PS mean;
		var abs_stdiff;
		ods output summary=stdiff_match11B_PS_final;
		run;
		proc delete data=abs_stdiff_match11B_PS;
		run;
		DATA tab_match11B2_PS;
		MERGE tab_match11B1_PS stdiff_match11B_PS_long stdiff_match11B_PS_final;
		RUN;
		proc delete data=tab_match11B1_PS;
		run;
		proc delete data=stdiff_match11B_PS_long;
		run;
		proc delete data=stdiff_match11B_PS_final;
		run;
		***relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=outPS01;
		class center(ref='0') / param=ref; 
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_matched01_PS;
		run;
		proc delete data=outPS01;
		run;
		data OR_matched01_PS;
		set OR_matched01_PS;
		keep oddsratioest;
		rename oddsratioest=OR_matched01;
		run;
		data bias_diff_sq_matched01_PS;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched01_s&i OR_matched01_PS;
		bias_ps01 = 100*(OR_matched01-beta_X)/beta_X;
		bias_reduction01 = 100*(abs(bias_unmatched01)-abs(bias_ps01))/abs(bias_unmatched01);
		diff_sq_ps01 = (OR_matched01-beta_X)**2;
		run;
		proc delete data=OR_matched01_PS;
		run;
		DATA tab_match11B_PS_final;
		MERGE tab_match11B2_PS bias_diff_sq_matched01_PS;
		RUN;
		proc delete data=tab_match11B2_PS;
		run;
		proc delete data=bias_diff_sq_matched01_PS;
		run;
		DATA simul.tab_match11B_PS_final;
		SET simul.tab_match11B_PS_final tab_match11B_PS_final;
		RUN;
		proc delete data=tab_match11B_PS_final;
		run;
		**control C vs case contrast;
		proc psmatch data=sim02 region=cs(EXTEND(STAT=PS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=ps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outPS02 ps=_ps matchid=_MatchID;
		ods output StdDiff=SMD02_PS;
		run;
		DATA tab_match11C_PS;
		simul = &i; 
		RUN;
		***sample size;
		proc freq data=outPS02;
		tables center / nocum nopercent;
		ods output OneWayFreqs=numPS02;
		run;
		data numPS02;
		set numPS02;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match11C1_PS;
		MERGE tab_match11C_PS numPS02;
		RUN;
		proc delete data=tab_match11C_PS;
		run;
		proc delete data=numPS02;
		run;
		***SMDs and SPDs;
		data stdiff_match11C_PS;
		set SMD02_PS;
		where obs='Matched';
		keep variable stddiff;
		run;
		proc delete data=SMD02_PS;
		run;
		proc transpose data=stdiff_match11C_PS out=stdiff_match11C_PS_long prefix=cov;
		run;
		data stdiff_match11C_PS_long;
		set stdiff_match11C_PS_long;
		drop _name_ _label_;
		run;
		***OSD;
		data abs_stdiff_match11C_PS;
		set stdiff_match11C_PS;
		abs_stdiff=abs(stddiff);
		run;
		proc delete data=stdiff_match11C_PS;
		run;
		proc means data=abs_stdiff_match11C_PS mean;
		var abs_stdiff;
		ods output summary=stdiff_match11C_PS_final;
		run;
		proc delete data=abs_stdiff_match11C_PS;
		run;
		DATA tab_match11C2_PS;
		MERGE tab_match11C1_PS stdiff_match11C_PS_long stdiff_match11C_PS_final;
		RUN;
		proc delete data=tab_match11C1_PS;
		run;
		proc delete data=stdiff_match11C_PS_long;
		run;
		proc delete data=stdiff_match11C_PS_final;
		run;
		***relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=outPS02;
		class center(ref='0') / param=ref; 
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_matched02_PS;
		run;
		proc delete data=outPS02;
		run;
		data OR_matched02_PS;
		set OR_matched02_PS;
		keep oddsratioest;
		rename oddsratioest=OR_matched02;
		run;
		data bias_diff_sq_matched02_PS;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched02_s&i OR_matched02_PS;
		bias_ps02 = 100*(OR_matched02-beta_X)/beta_X;
		bias_reduction02 = 100*(abs(bias_unmatched02)-abs(bias_ps02))/abs(bias_unmatched02);
		diff_sq_ps02 = (OR_matched02-beta_X)**2;
		run;
		proc delete data=OR_matched02_PS;
		run;
		DATA tab_match11C_PS_final;
		MERGE tab_match11C2_PS bias_diff_sq_matched02_PS;
		RUN;
		proc delete data=tab_match11C2_PS;
		run;
		proc delete data=bias_diff_sq_matched02_PS;
		run;
		DATA simul.tab_match11C_PS_final;
		SET simul.tab_match11C_PS_final tab_match11C_PS_final;
		RUN;
		proc delete data=tab_match11C_PS_final;
		run;

		*pairwise matched cohort on the logit of the propensity score (LPS);
		**control B vs case contrast;
		proc psmatch data=sim01 region=cs(EXTEND(STAT=LPS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=lps method=greedy(k=1) caliper(mult=stddev)=0.2 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outLPS01 lps=_lps matchid=_MatchID;
		ods output StdDiff=SMD01_LPS;
		run;
		DATA tab_match11B_LPS;
		simul = &i; 
		RUN;
		***sample size;
		proc freq data=outLPS01;
		tables center / nocum nopercent;
		ods output OneWayFreqs=numLPS01;
		run;
		data numLPS01;
		set numLPS01;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match11B1_LPS;
		MERGE tab_match11B_LPS numLPS01;
		RUN;
		proc delete data=tab_match11B_LPS;
		run;
		proc delete data=numLPS01;
		run;
		***SMDs and SPDs;
		data stdiff_match11B_LPS;
		set SMD01_LPS;
		where obs='Matched';
		keep variable stddiff;
		run;
		proc delete data=SMD01_LPS;
		run;
		proc transpose data=stdiff_match11B_LPS out=stdiff_match11B_LPS_long prefix=cov;
		run;
		data stdiff_match11B_LPS_long;
		set stdiff_match11B_LPS_long;
		drop _name_ _label_;
		run;
		***OSD;
		data abs_stdiff_match11B_LPS;
		set stdiff_match11B_LPS;
		abs_stdiff=abs(stddiff);
		run;
		proc delete data=stdiff_match11B_LPS;
		run;
		proc means data=abs_stdiff_match11B_LPS mean;
		var abs_stdiff;
		ods output summary=stdiff_match11B_LPS_final;
		run;
		proc delete data=abs_stdiff_match11B_LPS;
		run;
		DATA tab_match11B2_LPS;
		MERGE tab_match11B1_LPS stdiff_match11B_LPS_long stdiff_match11B_LPS_final;
		RUN;
		proc delete data=tab_match11B1_LPS;
		run;
		proc delete data=stdiff_match11B_LPS_long;
		run;
		proc delete data=stdiff_match11B_LPS_final;
		run;
		***relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=outLPS01;
		class center(ref='0') / param=ref; 
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_matched01_LPS;
		run;
		proc delete data=outLPS01;
		run;
		data OR_matched01_LPS;
		set OR_matched01_LPS;
		keep oddsratioest;
		rename oddsratioest=OR_matched01;
		run;
		data bias_diff_sq_matched01_LPS;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched01_s&i OR_matched01_LPS;
		bias_ps01 = 100*(OR_matched01-beta_X)/beta_X;
		bias_reduction01 = 100*(abs(bias_unmatched01)-abs(bias_ps01))/abs(bias_unmatched01);
		diff_sq_ps01 = (OR_matched01-beta_X)**2;
		run;
		proc delete data=OR_matched01_LPS;
		run;
		DATA tab_match11B_LPS_final;
		MERGE tab_match11B2_LPS bias_diff_sq_matched01_LPS;
		RUN;
		proc delete data=tab_match11B2_LPS;
		run;
		proc delete data=bias_diff_sq_matched01_LPS;
		run;
		DATA simul.tab_match11B_LPS_final;
		SET simul.tab_match11B_LPS_final tab_match11B_LPS_final;
		RUN;
		proc delete data=tab_match11B_LPS_final;
		run;
		proc delete data=sim01;
		run;
		**control C vs case contrast;
		proc psmatch data=sim02 region=cs(EXTEND(STAT=LPS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=lps method=greedy(k=1) caliper(mult=stddev)=0.2 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outLPS02 lps=_lps matchid=_MatchID;
		ods output StdDiff=SMD02_LPS;
		run;
		DATA tab_match11C_LPS;
		simul = &i; 
		RUN;
		***sample size;
		proc freq data=outLPS02;
		tables center / nocum nopercent;
		ods output OneWayFreqs=numLPS02;
		run;
		data numLPS02;
		set numLPS02;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match11C1_LPS;
		MERGE tab_match11C_LPS numLPS02;
		RUN;
		proc delete data=tab_match11C_LPS;
		run;
		proc delete data=numLPS02;
		run;
		***SMDs and SPDs;
		data stdiff_match11C_LPS;
		set SMD02_LPS;
		where obs='Matched';
		keep variable stddiff;
		run;
		proc delete data=SMD02_LPS;
		run;
		proc transpose data=stdiff_match11C_LPS out=stdiff_match11C_LPS_long prefix=cov;
		run;
		data stdiff_match11C_LPS_long;
		set stdiff_match11C_LPS_long;
		drop _name_ _label_;
		run;
		***OSD;
		data abs_stdiff_match11C_LPS;
		set stdiff_match11C_LPS;
		abs_stdiff=abs(stddiff);
		run;
		proc delete data=stdiff_match11C_LPS;
		run;
		proc means data=abs_stdiff_match11C_LPS mean;
		var abs_stdiff;
		ods output summary=stdiff_match11C_LPS_final;
		run;
		proc delete data=abs_stdiff_match11C_LPS;
		run;
		DATA tab_match11C2_LPS;
		MERGE tab_match11C1_LPS stdiff_match11C_LPS_long stdiff_match11C_LPS_final;
		RUN;
		proc delete data=tab_match11C1_LPS;
		run;
		proc delete data=stdiff_match11C_LPS_long;
		run;
		proc delete data=stdiff_match11C_LPS_final;
		run;
		***relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=outLPS02;
		class center(ref='0') / param=ref; 
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_matched02_LPS;
		run;
		proc delete data=outLPS02;
		run;
		data OR_matched02_LPS;
		set OR_matched02_LPS;
		keep oddsratioest;
		rename oddsratioest=OR_matched02;
		run;
		data bias_diff_sq_matched02_LPS;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched02_s&i OR_matched02_LPS;
		bias_ps02 = 100*(OR_matched02-beta_X)/beta_X;
		bias_reduction02 = 100*(abs(bias_unmatched02)-abs(bias_ps02))/abs(bias_unmatched02);
		diff_sq_ps02 = (OR_matched02-beta_X)**2;
		run;
		proc delete data=OR_matched02_LPS;
		run;
		DATA tab_match11C_LPS_final;
		MERGE tab_match11C2_LPS bias_diff_sq_matched02_LPS;
		RUN;
		proc delete data=tab_match11C2_LPS;
		run;
		proc delete data=bias_diff_sq_matched02_LPS;
		run;
		DATA simul.tab_match11C_LPS_final;
		SET simul.tab_match11C_LPS_final tab_match11C_LPS_final;
		RUN;
		proc delete data=tab_match11C_LPS_final;
		run;
		proc delete data=sim02;
		run;

		*three-way matched cohort;
		**multinomial logistic regression;
		proc logistic data=simul.simul&i;
		   class center(ref='0') D1(ref='0') D2(ref='0') D3(ref='0') D4(ref='0') D5(ref='0') / param=ref;
		   model center = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5 / link=glogit;
		   output out=out_mlr(KEEP=id_pz center _level_ prob) p=prob;
		run;
		PROC TRANSPOSE DATA=out_mlr OUT=out_mlr_wide
		PREFIX=prob;
		BY id_pz center;
		RUN;
		proc delete data=out_mlr;
		run;
		data out_mlr_wide;
		set out_mlr_wide;
		where _name_='prob';
		drop _name_ _label_;
		run;
		data pz_centerA;
		set out_mlr_wide;
		where center=0;
		rename id_pz=id_a prob1=x_a prob2=y_a;
		keep id_pz prob1 prob2;
		run;
		data pz_centerB;
		set out_mlr_wide;
		where center=1;
		rename id_pz=id_b prob1=x_b prob2=y_b;
		keep id_pz prob1 prob2;
		run;
		data pz_centerC;
		set out_mlr_wide;
		where center=2;
		rename id_pz=id_c prob1=x_c prob2=y_c;
		keep id_pz prob1 prob2;
		run;
		**extended common support (CS) and caliper computation;
		proc means data=out_mlr_wide min max;
		var prob1 prob2;
		class center;
		output out=common_support(keep=center min_p1 min_p2 max_p1 max_p2) min=min_p1 min_p2 max=max_p1 max_p2;
		run;
		proc delete data=out_mlr_wide;
		run;
		proc means data=common_support min max;
		var min_p1 min_p2 max_p1 max_p2;
		output out=common_support2 min=min_min_p1 min_min_p2 min_max_p1 min_max_p2 max=max_min_p1 max_min_p2 max_max_p1 max_max_p2;
		run;
		proc delete data=common_support;
		run;
		data common_support2;
		set common_support2;
		call symputx('min_cs_p1',max_min_p1);
		call symputx('min_cs_p2',max_min_p2);
		call symputx('max_cs_p1',min_max_p1);
		call symputx('max_cs_p2',min_max_p2);
		run;
		proc delete data=common_support2;
		run;
		proc means data=pz_centerA var;
		var x_a y_a;
		output out=var_a var=variance_x variance_y;
		run;
		data var_a;
		set var_a;
		tau_a = mean(variance_x,variance_y);
		call symputx('tau_a',tau_a);
		run;
		proc delete data=var_a;
		run;
		proc means data=pz_centerB var;
		var x_b y_b;
		output out=var_b var=variance_x variance_y;
		run;
		data var_b;
		set var_b;
		tau_b = mean(variance_x,variance_y);
		call symputx('tau_b',tau_b);
		run;
		proc delete data=var_b;
		run;
		proc means data=pz_centerC var;
		var x_c y_c;
		output out=var_c var=variance_x variance_y;
		run;
		data var_c;
		set var_c;
		tau_c = mean(variance_x,variance_y);
		call symputx('tau_c',tau_c);
		run;
		proc delete data=var_c;
		run;
		data pooled_std;
		pooled_std = sqrt((&tau_a+&tau_b+&tau_c)/3);
		call symputx('pooled_std', pooled_std);
		run;
		proc delete data=pooled_std;
		run;
		**selection of the subjects (cases and controls) which relies inside the CS;
		data pz_centerA_cs;
		set pz_centerA;
		where x_a>=&min_cs_p1-0.25*&pooled_std and x_a<=&max_cs_p1+0.25*&pooled_std
		 and y_a>=&min_cs_p2-0.25*&pooled_std and y_a<=&max_cs_p2+0.25*&pooled_std;
		run;
		proc delete data=pz_centerA;
		run;
		data pz_centerB_cs;
		set pz_centerB;
		tempID_B =_n_;
		where x_b>=&min_cs_p1-0.25*&pooled_std and x_b<=&max_cs_p1+0.25*&pooled_std
		 and y_b>=&min_cs_p2-0.25*&pooled_std and y_b<=&max_cs_p2+0.25*&pooled_std;
		run;
		proc delete data=pz_centerB;
		run;
		data pz_centerC_cs;
		set pz_centerC;
		tempID_c = _n_;
		where x_c>=&min_cs_p1-0.25*&pooled_std and x_c<=&max_cs_p1+0.25*&pooled_std
		 and y_c>=&min_cs_p2-0.25*&pooled_std and y_c<=&max_cs_p2+0.25*&pooled_std;
		run;
		proc delete data=pz_centerC;
		run;
		**cases ordered by decreasing pA (probability of being treated in center A with the experimental treatment);
		proc sort data=pz_centerA_cs;
		by descending x_a;
		run;
		data pz_centerA_cs;
		set pz_centerA_cs;
		tempID_a = _n_;
		run;
		**export datasets;
		proc export data=pz_centerA_cs 
		 outfile="<enter your path here>\pz_centerA_cs_simul&i..xlsx" 
		 dbms=excel replace;
		run;
		proc export data=pz_centerB_cs 
		 outfile="<enter your path here>\pz_centerB_cs_simul&i..xlsx" 
		 dbms=excel replace;
		run;
		proc export data=pz_centerC_cs 
		 outfile="<enter your path here>\pz_centerC_cs_simul&i..xlsx" 
		 dbms=excel replace;
		run;

		proc delete data=pz_centerA_cs;
		run;
		proc delete data=pz_centerB_cs;
		run;
		proc delete data=pz_centerC_cs;
		run;

	%end;

%mend;

DATA simul.tab_unmatchedB_final;
RUN;
DATA simul.tab_unmatchedC_final;
RUN;
DATA simul.tab_match11B_PS_final;
RUN;
DATA simul.tab_match11C_PS_final;
RUN;
DATA simul.tab_match11B_LPS_final;
RUN;
DATA simul.tab_match11C_LPS_final;
RUN;
options nonotes;
%simulation(1500,1000,1/3,1/3,1/3);
options notes;

*three-way matching in R;

%macro import_match111(n_simul);
	
	%do i=1 %to &n_simul;
	%put iteration &i;

		proc import datafile="<enter your path here>\match111_simul&i..xlsx" 
		 out=match111 dbms=xlsx replace;
		run;

		*control B vs case contrast;
		data match111_a;
		set match111;
		rename id_a=id_pz;
		keep id_a;
		run;
		proc sort data=match111_a;
		by id_pz;
		run;
		data match111_a_complete;
		merge match111_a(in=a) simul.simul&i(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=match111_a;
		run;
		data match111_b;
		set match111;
		rename id_b=id_pz;
		keep id_b;
		run;
		proc sort data=match111_b;
		by id_pz;
		run;
		data match111_b_complete;
		merge match111_b(in=a) simul.simul&i(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=match111_b;
		run;
		data match111_01;
		set match111_a_complete match111_b_complete;
		run;
		proc delete data=match111_b_complete;
		run;
		data tab_match111_B;
		simul=&i;
		run;
		**sample size;
		proc freq data=match111_01;
		tables center / nocum nopercent;
		ods output OneWayFreqs=num_match111_01;
		run;
		data num_match111_01;
		set num_match111_01;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match111_B1;
		MERGE tab_match111_B num_match111_01;
		RUN;
		proc delete data=tab_match111_B;
		run;
		proc delete data=num_match111_01;
		run;
		**SMDs and SPDs;
		***continuous;
		proc means data=match111_01 mean var;
		class center;
		var C1 C2 C3 C4 C5;
		ods output summary=SMD_match111B;
		run;
		proc transpose data=SMD_match111B out=SMD_match111B_long;
		run;
		proc delete data=SMD_match111B;
		run;
		data SMD_match111B_long;
		set SMD_match111B_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_match111B_long;
		set SMD_match111B_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_match111B_final;
		set SMD_match111B_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_match111B_long;
		run;
		***dichotomous;
		proc freq data=match111_01;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		ods output crosstabfreqs=SPD_match111B;
		run;
		data SPD_match111B;
		set SPD_match111B;
		RowPct = Rowpercent/100;
		where (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_match111B out=SPD_match111B_wide;
		run;
		proc delete data=SPD_match111B;
		run;
		data SPD_match111B_wide;
		set SPD_match111B_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_match111B_wide;
		set SPD_match111B_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_match111B_wide out=SPD_match111B_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_match111B_wide;
		run;
		data stdiff_match111B;
		set SMD_match111B_final(rename=(smd=std_diff)) SPD_match111B_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_match111B_final;
		run;
		proc delete data=SPD_match111B_final;
		run;
		proc transpose data=stdiff_match111B out=stdiff_match111B_wide prefix=cov;
		run;
		data stdiff_match111B_wide;
		set stdiff_match111B_wide;
		drop _name_;
		run;
		**OSD;
		data abs_stdiff_match111B;
		set stdiff_match111B;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_match111B;
		run;
		proc means data=abs_stdiff_match111B mean;
		var std_diff_abs;
		ods output summary=stdiff_match111B_final;
		run;
		proc delete data=abs_stdiff_match111B;
		run;
		DATA tab_match111B2;
		MERGE tab_match111_B1 stdiff_match111B_wide stdiff_match111B_final;
		RUN;
		proc delete data=tab_match111_B1;
		run;
		proc delete data=stdiff_match111B_wide;
		run;
		proc delete data=stdiff_match111B_final;
		run;
		**relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=match111_01;
		class center(ref='0')/ param=ref;
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_match111_01;
		run;
		data OR_match111_01;
		set OR_match111_01;
		keep oddsratioest;
		rename oddsratioest=OR_match111_01;
		run;
		data bias_diff_sq_match111_01;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched01_s&i OR_match111_01;
		bias_match111_01 = 100*(OR_match111_01-beta_X)/beta_X;
		bias_reduction01_111 = 100*(abs(bias_unmatched01)-abs(bias_match111_01))/abs(bias_unmatched01);
		diff_sq_match111_01 = (OR_match111_01-beta_X)**2;
		run;
		proc delete data=OR_match111_01;
		run;
		DATA tab_match111B_final;
		MERGE tab_match111B2 bias_diff_sq_match111_01;
		RUN;
		proc delete data=tab_match111B2;
		run;
		proc delete data=bias_diff_sq_match111_01;
		run;
		DATA simul.tab_match111B_final;
		SET simul.tab_match111B_final tab_match111B_final;
		RUN;
		proc delete data=tab_match111B_final;
		run;
		proc delete data=match111_01;
		run;
		*control C vs case contrast;
		data match111_c;
		set match111;
		rename id_c=id_pz;
		keep id_c;
		run;
		proc sort data=match111_c;
		by id_pz;
		run;
		data match111_c_complete;
		merge match111_c(in=a) simul.simul&i(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=match111_c;
		run;
		data match111_02;
		set match111_a_complete match111_c_complete;
		run;
		proc delete data=match111_a_complete;
		run;
		proc delete data=match111_c_complete;
		run;
		data tab_match111_C;
		simul=&i;
		run;
		**sample size;
		proc freq data=match111_02;
		tables center / nocum nopercent;
		ods output OneWayFreqs=num_match111_02;
		run;
		data num_match111_02;
		set num_match111_02;
		where center=0;
		n = frequency*2;
		keep n;
		run;
		DATA tab_match111_C1;
		MERGE tab_match111_C num_match111_02;
		RUN;
		proc delete data=tab_match111_C;
		run;
		proc delete data=num_match111_02;
		run;
		**SMDs and SPDs;
		***continuous;
		proc means data=match111_02 mean var;
		class center;
		var C1 C2 C3 C4 C5;
		ods output summary=SMD_match111C;
		run;
		proc transpose data=SMD_match111C out=SMD_match111C_long;
		run;
		proc delete data=SMD_match111C;
		run;
		data SMD_match111C_long;
		set SMD_match111C_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_match111C_long;
		set SMD_match111C_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_match111C_final;
		set SMD_match111C_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_match111C_long;
		run;
		***dichotomous;
		proc freq data=match111_02;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		ods output crosstabfreqs=SPD_match111C;
		run;
		data SPD_match111C;
		set SPD_match111C;
		RowPct = Rowpercent/100;
		where (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_match111C out=SPD_match111C_wide;
		run;
		proc delete data=SPD_match111C;
		run;
		data SPD_match111C_wide;
		set SPD_match111C_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_match111C_wide;
		set SPD_match111C_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_match111C_wide out=SPD_match111C_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_match111C_wide;
		run;
		data stdiff_match111C;
		set SMD_match111C_final(rename=(smd=std_diff)) SPD_match111C_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_match111C_final;
		run;
		proc delete data=SPD_match111C_final;
		run;
		proc transpose data=stdiff_match111C out=stdiff_match111C_wide prefix=cov;
		run;
		data stdiff_match111C_wide;
		set stdiff_match111C_wide;
		drop _name_;
		run;
		**OSD;
		data abs_stdiff_match111C;
		set stdiff_match111C;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_match111C;
		run;
		proc means data=abs_stdiff_match111C mean;
		var std_diff_abs;
		ods output summary=stdiff_match111C_final;
		run;
		proc delete data=abs_stdiff_match111C;
		run;
		DATA tab_match111C2;
		MERGE tab_match111_C1 stdiff_match111C_wide stdiff_match111C_final;
		RUN;
		proc delete data=tab_match111_C1;
		run;
		proc delete data=stdiff_match111C_wide;
		run;
		proc delete data=stdiff_match111C_final;
		run;
		**relative bias(%), reduction in bias(%) and MSE;
		proc logistic data=match111_02;
		class center(ref='0')/ param=ref;
		model Y(Event='1')= center / link=logit;
		ods output OddsRatios=OR_match111_02;
		run;
		data OR_match111_02;
		set OR_match111_02;
		keep oddsratioest;
		rename oddsratioest=OR_match111_02;
		run;
		data bias_diff_sq_match111_02;
		merge simul.OR_true_simul&i simul.bias_diffsq_unmatched02_s&i OR_match111_02;
		bias_match111_02 = 100*(OR_match111_02-beta_X)/beta_X;
		bias_reduction02_111 = 100*(abs(bias_unmatched02)-abs(bias_match111_02))/abs(bias_unmatched02);
		diff_sq_match111_02 = (OR_match111_02-beta_X)**2;
		run;
		proc delete data=OR_match111_02;
		run;
		DATA tab_match111C_final;
		MERGE tab_match111C2 bias_diff_sq_match111_02;
		RUN;
		proc delete data=tab_match111C2;
		run;
		proc delete data=bias_diff_sq_match111_02;
		run;
		DATA simul.tab_match111C_final;
		SET simul.tab_match111C_final tab_match111C_final;
		RUN;
		proc delete data=tab_match111C_final;
		run;
		proc delete data=match111_02;
		run;

		proc delete data=match111;
		run;
	
	%end;

%mend;

DATA simul.tab_match111B_final;
RUN;
DATA simul.tab_match111C_final;
RUN;
options nonotes;
%import_match111(1500);
options notes;

*control B vs case contrast performance;
**unmatched;
proc means data=simul.tab_unmatchedB_final mean std maxdec=2; 
run;
**PS pairwise matched;
proc means data=simul.tab_match11B_PS_final mean std maxdec=2;
run;
**LPS pairwise matched;
proc means data=simul.tab_match11B_LPS_final mean std maxdec=2;
run;
**three-way matched;
proc means data=simul.tab_match111B_final mean std maxdec=2;
run;
*control C vs case contrast performance;
**unmatched;
proc means data=simul.tab_unmatchedC_final mean std maxdec=2;
run;
**PS pairwise matched;
proc means data=simul.tab_match11C_PS_final mean std maxdec=2;
run;
**LPS pairwise matched;
proc means data=simul.tab_match11C_LPS_final mean std maxdec=2;
run;
**three-way matched;
proc means data=simul.tab_match111C_final mean std maxdec=2;
run;


*controls comparison;
**unmatched;
%macro SD_unmatched_controls(n_simul);
	
	%do i=1 %to &n_simul;
	%put iteration &i;
		
		data tab_unmatched_ctrl;
		simul=&i;
		run;
		*SMDs and SPDs;
		**continuous;
		proc means data=simul.simul&i mean var;
		class center;
		var C1 C2 C3 C4 C5;
		where center ne 0;
		ods output summary=SMD_unmatched_ctrl;
		run;
		proc transpose data=SMD_unmatched_ctrl out=SMD_unmatched_ctrl_long;
		run;
		proc delete data=SMD_unmatched_ctrl;
		run;
		data SMD_unmatched_ctrl_long;
		set SMD_unmatched_ctrl_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_unmatched_ctrl_long;
		set SMD_unmatched_ctrl_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_unmatched_ctrl_final;
		set SMD_unmatched_ctrl_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_unmatched_ctrl_long;
		run;
		**dichotomous;
		proc freq data=simul.simul&i;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		where center ne 0;
		ods output crosstabfreqs=SPD_unmatched_ctrl;
		run;
		data SPD_unmatched_ctrl;
		set SPD_unmatched_ctrl;
		RowPct = Rowpercent/100;
		where (center=1 or center=2) 
		 and (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_unmatched_ctrl out=SPD_unmatched_ctrl_wide;
		run;
		proc delete data=SPD_unmatched_ctrl;
		run;
		data SPD_unmatched_ctrl_wide;
		set SPD_unmatched_ctrl_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_unmatched_ctrl_wide;
		set SPD_unmatched_ctrl_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_unmatched_ctrl_wide out=SPD_unmatched_ctrl_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_unmatched_ctrl_wide;
		run;
		data stdiff_unmatched_ctrl;
		set SMD_unmatched_ctrl_final(rename=(smd=std_diff)) SPD_unmatched_ctrl_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_unmatched_ctrl_final;
		run;
		proc delete data=SPD_unmatched_ctrl_final;
		run;
		proc transpose data=stdiff_unmatched_ctrl out=stdiff_unmatched_ctrl_wide prefix=cov;
		run;
		data stdiff_unmatched_ctrl_wide;
		set stdiff_unmatched_ctrl_wide;
		drop _name_;
		run;
		*OSD;
		data abs_stdiff_unmatched_ctrl;
		set stdiff_unmatched_ctrl;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_unmatched_ctrl;
		run;
		proc means data=abs_stdiff_unmatched_ctrl mean /*std*/;
		var std_diff_abs;
		ods output summary=stdiff_unmatched_ctrl_final;
		run;
		proc delete data=abs_stdiff_unmatched_ctrl;
		run;
		DATA tab_unmatched_ctrl2;
		MERGE tab_unmatched_ctrl stdiff_unmatched_ctrl_wide stdiff_unmatched_ctrl_final;
		RUN;
		proc delete data=tab_unmatched_ctrl;
		run;
		proc delete data=stdiff_unmatched_ctrl_wide;
		run;
		proc delete data=stdiff_unmatched_ctrl_final;
		run;
		DATA simul.tab_unmatched_ctrl;
		SET simul.tab_unmatched_ctrl tab_unmatched_ctrl2;
		RUN;
		proc delete data=tab_unmatched_ctrl2;
		run;

	%end;

%mend;

DATA simul.tab_unmatched_ctrl;
RUN;
options nonotes;
%SD_unmatched_controls(1500);
options notes;


**PS pairwise contrast;
%macro SD_match11_PS_ctrl(n_simul);

	%do i=1 %to &n_simul;
	%put iteration &i;

		DATA tab_match11_PS_ctrl;
		simul = &i; 
		RUN;
		data sim01;
		set simul.simul&i;
		if center ne 2;
		run;
		proc psmatch data=sim01 region=cs(EXTEND(STAT=PS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=ps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outPS01 ps=_ps matchid=_MatchID;
		run;
		data outPS01;
		set outPS01;
		keep id_pz center _matchid;
		run;
		proc sort data=outPS01;
		by _matchid center;
		run;
		proc transpose data=outPS01 out=outPS01_wide;
		by _matchid;
		run;
		data outPS01_wide;
		set outPS01_wide;
		keep col1 col2;
		where _name_='ID_pz';
		rename col1=id_a col2=id_b;
		run;
		data sim02;
		set simul.simul&i;
		if center ne 1;
		run;
		proc psmatch data=sim02 region=cs(EXTEND(STAT=PS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=ps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outPS02 ps=_ps matchid=_MatchID;
		run;
		data outPS02;
		set outPS02;
		keep id_pz center _matchid;
		run;
		proc sort data=outPS02;
		by _matchid center;
		run;
		proc transpose data=outPS02 out=outPS02_wide;
		by _matchid;
		run;
		data outPS02_wide;
		set outPS02_wide;
		keep col1 col2;
		where _name_='ID_pz';
		rename col1=id_a col2=id_c;
		run;
		proc sort data=outPS01_wide;
		by id_a;
		run;
		proc sort data=outPS02_wide;
		by id_a;
		run;
		data common_cases;
		merge outPS01_wide(in=a) outPS02_wide(in=b);
		by id_a;
		if a and b;
		run;
		proc delete data=sim01;
		run;
		proc delete data=sim02;
		run;
		proc delete data=outps01;
		run;
		proc delete data=outps02;
		run;
		proc delete data=outPS01_wide;
		run;
		proc delete data=outPS02_wide;
		run;
		data ctrl1;
		set common_cases;
		keep id_b;
		rename id_b=id_pz;
		run;
		data ctrl2;
		set common_cases;
		keep id_c;
		rename id_c=id_pz;
		run;
		data ctrl_tot;
		set ctrl1 ctrl2;
		run;
		proc sort data=ctrl_tot;
		by id_pz;
		run;
		data match11_PS_ctrl;
		merge simul.simul&i(in=a) ctrl_tot(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=ctrl1;
		run;
		proc delete data=ctrl2;
		run;
		proc delete data=common_cases;
		run;
		proc delete data=ctrl_tot;
		run;
		*SMDs and SPDs;
		**continuous;
		proc means data=match11_PS_ctrl mean var;
		class center;
		var C1 C2 C3 C4 C5;
		ods output summary=SMD_match11_PS_ctrl;
		run;
		proc transpose data=SMD_match11_PS_ctrl out=SMD_match11_PS_ctrl_long;
		run;
		proc delete data=SMD_match11_PS_ctrl;
		run;
		data SMD_match11_PS_ctrl_long;
		set SMD_match11_PS_ctrl_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_match11_PS_ctrl_long;
		set SMD_match11_PS_ctrl_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_match11_PS_ctrl_final;
		set SMD_match11_PS_ctrl_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_match11_PS_ctrl_long;
		run;
		**dichotomous;
		proc freq data=match11_PS_ctrl;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		ods output crosstabfreqs=SPD_match11_PS_ctrl;
		run;
		data SPD_match11_PS_ctrl;
		set SPD_match11_PS_ctrl;
		RowPct = Rowpercent/100;
		where (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_match11_PS_ctrl out=SPD_match11_PS_ctrl_wide;
		run;
		proc delete data=SPD_match11_PS_ctrl;
		run;
		data SPD_match11_PS_ctrl_wide;
		set SPD_match11_PS_ctrl_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_match11_PS_ctrl_wide;
		set SPD_match11_PS_ctrl_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_match11_PS_ctrl_wide out=SPD_match11_PS_ctrl_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_match11_PS_ctrl_wide;
		run;
		data stdiff_match11_PS_ctrl;
		set SMD_match11_PS_ctrl_final(rename=(smd=std_diff)) SPD_match11_PS_ctrl_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_match11_PS_ctrl_final;
		run;
		proc delete data=SPD_match11_PS_ctrl_final;
		run;
		proc transpose data=stdiff_match11_PS_ctrl out=stdiff_match11_PS_ctrl_wide prefix=cov;
		run;
		data stdiff_match11_PS_ctrl_wide;
		set stdiff_match11_PS_ctrl_wide;
		drop _name_;
		run;
		*OSD;
		data abs_stdiff_match11_PS_ctrl;
		set stdiff_match11_PS_ctrl;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_match11_PS_ctrl;
		run;
		proc means data=abs_stdiff_match11_PS_ctrl mean;
		var std_diff_abs;
		ods output summary=stdiff_match11_PS_ctrl_final;
		run;
		proc delete data=abs_stdiff_match11_PS_ctrl;
		run;
		DATA tab_match11_PS_ctrl2;
		MERGE tab_match11_PS_ctrl stdiff_match11_PS_ctrl_wide stdiff_match11_PS_ctrl_final;
		RUN;
		proc delete data=tab_match11_PS_ctrl;
		run;
		proc delete data=stdiff_match11_PS_ctrl_wide;
		run;
		proc delete data=stdiff_match11_PS_ctrl_final;
		run;
		DATA simul.tab_match11_PS_ctrl;
		SET simul.tab_match11_PS_ctrl tab_match11_PS_ctrl2;
		RUN;
		proc delete data=tab_match11_PS_ctrl2;
		run;	
		proc delete data=match11_PS_ctrl;
		run;	

	%end;

%mend;

DATA simul.tab_match11_PS_ctrl;
RUN;
options nonotes;
%SD_match11_PS_ctrl(1500);
options notes;


*LPS pairwise matched;
%macro SD_match11_LPS_ctrl(n_simul);

	%do i=1 %to &n_simul;
	%put iteration &i;

		DATA tab_match11_LPS_ctrl;
		simul = &i; 
		RUN;
		data sim01;
		set simul.simul&i;
		if center ne 2;
		run;
		proc psmatch data=sim01 region=cs(EXTEND(STAT=LPS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=lps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outLPS01 lps=_lps matchid=_MatchID;
		run;
		data outLPS01;
		set outLPS01;
		keep id_pz center _matchid;
		run;
		proc sort data=outLPS01;
		by _matchid center;
		run;
		proc transpose data=outLPS01 out=outLPS01_wide;
		by _matchid;
		run;
		data outLPS01_wide;
		set outLPS01_wide;
		keep col1 col2;
		where _name_='ID_pz';
		rename col1=id_a col2=id_b;
		run;
		data sim02;
		set simul.simul&i;
		if center ne 1;
		run;
		proc psmatch data=sim02 region=cs(EXTEND(STAT=LPS MULT=STDDEV)=0.25); 
		class center D1 D2 D3 D4 D5;
		psmodel center(Treated="0") = C1 C2 C3 C4 C5 D1 D2 D3 D4 D5;
		match stat=lps method=greedy(k=1) caliper(mult=one)=0.03 weight=none;
		assess var=(C1 C2 C3 C4 C5 D1 D2 D3 D4 D5) / varinfo;
		output out(obs=match)=outLPS02 lps=_lps matchid=_MatchID;
		run;
		data outLPS02;
		set outLPS02;
		keep id_pz center _matchid;
		run;
		proc sort data=outLPS02;
		by _matchid center;
		run;
		proc transpose data=outLPS02 out=outLPS02_wide;
		by _matchid;
		run;
		data outLPS02_wide;
		set outLPS02_wide;
		keep col1 col2;
		where _name_='ID_pz';
		rename col1=id_a col2=id_c;
		run;
		proc sort data=outLPS01_wide;
		by id_a;
		run;
		proc sort data=outLPS02_wide;
		by id_a;
		run;
		data common_cases;
		merge outLPS01_wide(in=a) outLPS02_wide(in=b);
		by id_a;
		if a and b;
		run;
		proc delete data=sim01;
		run;
		proc delete data=sim02;
		run;
		proc delete data=outlps01;
		run;
		proc delete data=outlps02;
		run;
		proc delete data=outLPS01_wide;
		run;
		proc delete data=outLPS02_wide;
		run;
		data ctrl1;
		set common_cases;
		keep id_b;
		rename id_b=id_pz;
		run;
		data ctrl2;
		set common_cases;
		keep id_c;
		rename id_c=id_pz;
		run;
		data ctrl_tot;
		set ctrl1 ctrl2;
		run;
		proc sort data=ctrl_tot;
		by id_pz;
		run;
		data match11_LPS_ctrl;
		merge simul.simul&i(in=a) ctrl_tot(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=ctrl1;
		run;
		proc delete data=ctrl2;
		run;
		proc delete data=common_cases;
		run;
		proc delete data=ctrl_tot;
		run;
		*SMDs and SPDs;
		**continuous;
		proc means data=match11_LPS_ctrl mean var;
		class center;
		var C1 C2 C3 C4 C5;
		ods output summary=SMD_match11_LPS_ctrl;
		run;
		proc transpose data=SMD_match11_LPS_ctrl out=SMD_match11_LPS_ctrl_long;
		run;
		proc delete data=SMD_match11_LPS_ctrl;
		run;
		data SMD_match11_LPS_ctrl_long;
		set SMD_match11_LPS_ctrl_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_match11_LPS_ctrl_long;
		set SMD_match11_LPS_ctrl_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_match11_LPS_ctrl_final;
		set SMD_match11_LPS_ctrl_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_match11_LPS_ctrl_long;
		run;
		**dichotomous;
		proc freq data=match11_LPS_ctrl;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		ods output crosstabfreqs=SPD_match11_LPS_ctrl;
		run;
		data SPD_match11_LPS_ctrl;
		set SPD_match11_LPS_ctrl;
		RowPct = Rowpercent/100;
		where (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_match11_LPS_ctrl out=SPD_match11_LPS_ctrl_wide;
		run;
		proc delete data=SPD_match11_LPS_ctrl;
		run;
		data SPD_match11_LPS_ctrl_wide;
		set SPD_match11_LPS_ctrl_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_match11_LPS_ctrl_wide;
		set SPD_match11_LPS_ctrl_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_match11_LPS_ctrl_wide out=SPD_match11_LPS_ctrl_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_match11_LPS_ctrl_wide;
		run;
		data stdiff_match11_LPS_ctrl;
		set SMD_match11_LPS_ctrl_final(rename=(smd=std_diff)) SPD_match11_LPS_ctrl_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_match11_LPS_ctrl_final;
		run;
		proc delete data=SPD_match11_LPS_ctrl_final;
		run;
		proc transpose data=stdiff_match11_LPS_ctrl out=stdiff_match11_LPS_ctrl_wide prefix=cov;
		run;
		data stdiff_match11_LPS_ctrl_wide;
		set stdiff_match11_LPS_ctrl_wide;
		drop _name_;
		run;
		*OSD;
		data abs_stdiff_match11_LPS_ctrl;
		set stdiff_match11_LPS_ctrl;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_match11_LPS_ctrl;
		run;
		proc means data=abs_stdiff_match11_LPS_ctrl mean;
		var std_diff_abs;
		ods output summary=stdiff_match11_LPS_ctrl_final;
		run;
		proc delete data=abs_stdiff_match11_LPS_ctrl;
		run;
		DATA tab_match11_LPS_ctrl2;
		MERGE tab_match11_LPS_ctrl stdiff_match11_LPS_ctrl_wide stdiff_match11_LPS_ctrl_final;
		RUN;
		proc delete data=tab_match11_LPS_ctrl;
		run;
		proc delete data=stdiff_match11_LPS_ctrl_wide;
		run;
		proc delete data=stdiff_match11_LPS_ctrl_final;
		run;
		DATA simul.tab_match11_LPS_ctrl;
		SET simul.tab_match11_LPS_ctrl tab_match11_LPS_ctrl2;
		RUN;
		proc delete data=tab_match11_LPS_ctrl2;
		run;	
		proc delete data=match11_LPS_ctrl;
		run;	

	%end;

%mend;

DATA simul.tab_match11_LPS_ctrl;
RUN;
options nonotes;
%SD_match11_LPS_ctrl(1500);
options notes;


**three-way matched;
%macro SD_match111_controls(n_simul);

	%do i=1 %to &n_simul;
	%put iteration &i;

		proc import datafile="<enter your path here>\match111_simul&i..xlsx" 
		 out=match111 dbms=xlsx replace;
		run;

		data match111_b;
		set match111;
		rename id_b=id_pz;
		keep id_b;
		run;
		proc sort data=match111_b;
		by id_pz;
		run;
		data match111_b_complete;
		merge match111_b(in=a) simul.simul&i(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=match111_b;
		run;
		data match111_c;
		set match111;
		rename id_c=id_pz;
		keep id_c;
		run;
		proc sort data=match111_c;
		by id_pz;
		run;
		data match111_c_complete;
		merge match111_c(in=a) simul.simul&i(in=b);
		by id_pz;
		if a and b;
		run;
		proc delete data=match111_c;
		run;
		data match111_ctrl;
		set match111_b_complete match111_c_complete;
		run;
		proc delete data=match111_b_complete;
		run;
		proc delete data=match111_c_complete;
		run;
		data tab_match111_ctrl;
		simul=&i;
		run;
		*SMDs and SPDs;
		**continuous;
		proc means data=match111_ctrl mean var;
		class center;
		var C1 C2 C3 C4 C5;
		ods output summary=SMD_match111_ctrl;
		run;
		proc transpose data=SMD_match111_ctrl out=SMD_match111_ctrl_long;
		run;
		proc delete data=SMD_match111_ctrl;
		run;
		data SMD_match111_ctrl_long;
		set SMD_match111_ctrl_long;
		name = substr(_name_,1,2);
		where _name_ ne 'center' and _name_ ne 'NObs';
		drop _name_;
		run;
		data SMD_match111_ctrl_long;
		set SMD_match111_ctrl_long;
		by name;
		retain mean_diff;
		if first.name then do;
			if _label_='Mean' then mean_diff=col1-col2;
						   end;
		if _label_='Variance' then std_pooled=sqrt((col1+col2)/2);
		if last.name;
		drop _label_ col1 col2;
		run;
		data SMD_match111_ctrl_final;
		set SMD_match111_ctrl_long;
		smd = mean_diff/std_pooled;
		drop mean_diff std_pooled;
		run;
		proc delete data=SMD_match111_ctrl_long;
		run;
		**dichotomous;
		proc freq data=match111_ctrl;
		tables D1*center D2*center D3*center D4*center D5*center / nopercent nocol;
		ods output crosstabfreqs=SPD_match111_ctrl;
		run;
		data SPD_match111_ctrl;
		set SPD_match111_ctrl;
		RowPct = Rowpercent/100;
		where (D1 ne 0 and D2 ne 0 and D3 ne 0 and D4 ne 0 and D5 ne 0)
		 and (rowpercent ne .);
		drop table _type_ _table_ frequency missing Rowpercent;
		run;
		proc transpose data=SPD_match111_ctrl out=SPD_match111_ctrl_wide;
		run;
		proc delete data=SPD_match111_ctrl;
		run;
		data SPD_match111_ctrl_wide;
		set SPD_match111_ctrl_wide;
		D1=(col1-col2)/sqrt((col1*(1-col1)+col2*(1-col2))/2);
		D2=(col3-col4)/sqrt((col3*(1-col3)+col4*(1-col4))/2);
		D3=(col5-col6)/sqrt((col5*(1-col5)+col6*(1-col6))/2);
		D4=(col7-col8)/sqrt((col7*(1-col7)+col8*(1-col8))/2);
		D5=(col9-col10)/sqrt((col9*(1-col9)+col10*(1-col10))/2);
		where _name_ = 'RowPct';
		run;
		data SPD_match111_ctrl_wide;
		set SPD_match111_ctrl_wide;
		drop _name_ col:;
		run;
		proc transpose data=SPD_match111_ctrl_wide out=SPD_match111_ctrl_final(rename=(col1=pct_diff));
		run;
		proc delete data=SPD_match111_ctrl_wide;
		run;
		data stdiff_match111_ctrl;
		set SMD_match111_ctrl_final(rename=(smd=std_diff)) SPD_match111_ctrl_final(rename=(_name_=name pct_diff=std_diff));
		run;
		proc delete data=SMD_match111_ctrl_final;
		run;
		proc delete data=SPD_match111_ctrl_final;
		run;
		proc transpose data=stdiff_match111_ctrl out=stdiff_match111_ctrl_wide prefix=cov;
		run;
		data stdiff_match111_ctrl_wide;
		set stdiff_match111_ctrl_wide;
		drop _name_;
		run;
		data abs_stdiff_match111_ctrl;
		set stdiff_match111_ctrl;
		std_diff_abs=abs(std_diff);
		run;
		proc delete data=stdiff_match111_ctrl;
		run;
		proc means data=abs_stdiff_match111_ctrl mean;
		var std_diff_abs;
		ods output summary=stdiff_match111_ctrl_final;
		run;
		proc delete data=abs_stdiff_match111_ctrl;
		run;
		DATA tab_match111_ctrl2;
		MERGE tab_match111_ctrl stdiff_match111_ctrl_wide stdiff_match111_ctrl_final;
		RUN;
		proc delete data=tab_match111_ctrl;
		run;
		proc delete data=stdiff_match111_ctrl_wide;
		run;
		proc delete data=stdiff_match111_ctrl_final;
		run;
		DATA simul.tab_match111_ctrl;
		SET simul.tab_match111_ctrl tab_match111_ctrl2;
		RUN;
		proc delete data=tab_match111_ctrl2;
		run;
		proc delete data=match111;
		run;
		proc delete data=match111_ctrl;
		run;

	%end;

%mend;

DATA simul.tab_match111_ctrl;
RUN;
options nonotes;
%SD_match111_controls(1500);
options notes;


***controls B vs controls C performance;
****unmatched;
proc means data=simul.tab_unmatched_ctrl mean std maxdec=2;
run;
****PS pairwise matched;
proc means data=simul.tab_match11_PS_ctrl mean std maxdec=2;
run;
****LPS pairwise matched;
proc means data=simul.tab_match11_LPS_ctrl mean std maxdec=2;
run;
****three-way matched;
proc means data=simul.tab_match111_ctrl mean std maxdec=2;
run;

